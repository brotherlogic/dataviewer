// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/main.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesMainHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x53\x5f\x6f\x9b\x3e\x14\x7d\xf7\xa7\xb8\x3f\x54\x35\xf0\x13\x31\xb4\x5a\xab\x8c\x40\x9e\x32\xed\x8f\xb6\x6e\x5a\xab\x69\x52\x55\x4d\x2e\xdc\x36\x6e\x1d\xc3\xec\x4b\x12\x14\xf1\xdd\x27\x1b\xe8\xaa\xe5\x09\xdb\xe7\x9c\x7b\xcf\xc9\xbd\x2c\xdf\xa0\xa8\x56\x0c\x20\xff\x6f\x3e\x87\x6f\xaa\x26\xd5\xf1\x27\x0b\xf3\xb9\xbb\x84\xdc\x96\x46\x36\x04\xd6\x94\x45\xb0\x21\x6a\x6c\x96\x24\x65\xa5\x79\xa3\x6a\xe2\xaa\x4b\x1a\xcf\x98\x2b\x41\x68\x89\x6f\xa5\xe6\x4f\x36\x58\xe5\xc9\xc0\x5b\xb1\x3c\x19\x0a\xb0\xfc\xbe\xae\x3a\x5f\xc8\xa2\xc2\x92\xbc\x3c\x1c\x8f\x46\xe8\x47\x84\x93\x67\xec\x62\x38\xd9\x09\xd5\x22\x64\x05\xf0\x2b\xb1\x45\xdb\xf7\x1e\x94\xd7\x0d\xc9\x5a\x83\x7f\x2d\x82\xe3\x71\x02\xf6\x7d\xb0\x72\xa7\x67\xec\xa0\xef\xf3\x64\xc0\x4d\xca\xa8\x2b\x2f\x90\x27\x7f\x2b\xba\x63\x25\x77\x20\xab\x22\xd8\x76\x6b\xb9\x0b\x56\xaf\x8c\x43\xb9\x11\x86\x60\x2f\x95\x82\x7b\x84\xca\x88\xbd\x06\xa9\xad\xac\x10\x68\x23\x2d\xac\x3f\xfe\x70\xc9\xe4\x49\x25\x77\x83\x97\xd1\x26\xdb\x09\x03\x87\xad\x72\x11\x41\x01\x1a\xf7\xf0\xf3\xcb\xe7\x0f\x44\xcd\x77\xfc\xdd\xa2\xa5\x30\x5a\x7a\x4c\x6b\x14\x14\xe0\xa3\xcc\x92\xe4\xec\xed\x39\x3f\xbb\x5c\xf0\xc5\x25\x3f\xbf\x48\xb3\x45\xba\xb8\x08\x96\x8c\x8d\x42\xbc\xd6\x06\x45\xd5\x59\x12\x84\xe5\xc6\x07\x55\xc0\x43\xab\x4b\x67\x33\x8c\xe0\xe8\x9d\xca\x07\x08\x5d\x77\xdc\x83\xaf\x1d\x18\x8a\x02\xde\xc0\xe9\xa9\xef\x9a\x3b\x7e\x6b\xdd\xdd\x79\x9a\x4e\x2c\xf7\x73\x0d\x19\xb1\xff\x55\x09\x12\x50\xc0\xa7\xeb\xaf\x57\xbc\x11\xc6\xe2\xa4\x67\x9b\x5a\x5b\xbc\xc1\x03\x45\xcb\xc1\x23\x19\x51\xba\x2e\x9c\xc8\x21\x83\xdb\xbb\x98\x01\x74\xd3\x07\x75\x0d\x66\x30\xb3\xa5\x20\x42\x33\x8b\x59\xbf\x64\xec\xa1\x36\x10\xa2\x26\xd3\x81\xd4\x2f\xf5\x86\x3e\xbc\x1c\x3f\xf0\xa6\xb5\x9b\xd0\xa5\xb6\x16\x84\xe1\x84\xb9\xf5\xac\x3b\x4e\x72\x8b\x96\xc4\xb6\xf9\xff\x2c\x4d\xd3\x28\x5a\xbe\x30\xbb\x81\xf9\x2f\xc1\x8f\x47\xb4\x64\x3d\x63\x65\xad\x6d\xad\x90\xab\xfa\x31\xf4\x9c\x68\x30\x32\x7a\xbe\x1d\x1d\xdd\x8d\xfe\x94\xe8\xea\x96\x46\x83\x24\x49\x61\x36\x5b\x3b\xa8\x9b\x90\x99\xf7\x33\x2e\x89\xc6\xbd\xfb\x0a\x67\x7e\x8e\x66\xb1\x57\x8c\x47\x01\x17\x97\x4b\xb8\xf7\x8c\x97\xff\xb3\x41\x1d\x06\xef\xdf\xdd\x04\xb1\x1b\x84\x18\xc8\xf8\x36\xa7\x77\x8b\xba\x0a\xbd\xbb\xd7\x0b\xe4\x17\x67\xdc\xd3\x3f\x01\x00\x00\xff\xff\xf1\xbd\x06\xe6\xb0\x03\x00\x00")

func templatesMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainHtml,
		"templates/main.html",
	)
}

func templatesMainHtml() (*asset, error) {
	bytes, err := templatesMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.html", size: 944, mode: os.FileMode(436), modTime: time.Unix(1545009162, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/main.html": templatesMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"main.html": &bintree{templatesMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
