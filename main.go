// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/main.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesMainHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x4f\x8f\x9b\x30\x10\xc5\xef\xfe\x14\x53\x2e\x84\x8a\xbf\x4b\x30\xbb\x84\xe4\x94\x4b\x6f\x3d\xf5\x12\x45\x95\x17\xdc\xe2\x95\x03\xc8\x9e\xc0\xa2\x55\xbe\x7b\x85\x09\xab\x55\xdb\x83\xaf\x7b\xb3\xac\xdf\x7b\xf3\x46\xf8\x51\x36\x9c\xd5\x07\x02\x50\x7e\x09\x02\xf8\x2e\x3b\x94\x53\xf8\xa2\x21\x08\xe6\x4b\x28\x75\xa5\x44\x8f\xa0\x55\xb5\x77\x1a\xc4\x5e\x17\x51\x54\xd5\x6d\xd8\xcb\x0e\x43\x39\x45\xbd\x51\x04\x92\x21\xd7\x18\x5e\x44\x1b\xbe\x68\xe7\x50\x46\x8b\xee\x40\xca\x68\x19\x40\xca\xe7\xae\x9e\xcc\xa0\x5a\x0c\x20\xea\xbd\x73\x99\x8e\x62\x70\x0e\x1f\x06\x43\xd5\x30\x85\x30\x0a\x29\xe1\x99\x43\xad\xd8\xd8\x82\x68\xb5\xa8\x39\x60\x23\x34\x1c\xbf\xfd\x98\x93\x95\x51\x2d\x06\xe3\xb5\x8e\x51\x6c\xfc\x59\x33\x64\xb0\x87\xd3\x9b\x83\xe2\xc2\x35\xb2\x4b\xef\x14\x49\xb6\x4d\xb3\x34\x8d\xe9\x83\xef\x0c\x4c\x5e\xb9\x53\x04\x49\x9c\xe4\x69\x72\xf3\xff\x07\xa6\x74\x6b\x07\x52\x9a\xd9\x81\x4f\x94\x5a\x81\xdb\x07\x9a\xdb\x81\x19\x7d\xb4\x03\x1f\xe9\x93\x15\x98\x25\x79\x6c\x07\x6e\x6d\xc1\x3c\x4f\xac\x40\x1a\xe7\xa9\x1d\x98\xe6\xff\x7e\x99\x33\x21\x03\x53\x80\x8a\x55\x1c\xf6\xf0\x46\x00\x5e\x0b\x38\x9d\x7d\x02\x30\xad\x07\x9c\x7a\x5e\x80\xab\x2b\x86\xc8\x95\xeb\x93\xdb\x8e\x90\x5f\x9d\x82\x0d\x6f\x51\x4d\x20\x5a\x58\x9f\x8f\x67\x2c\x8c\x5d\xf8\x1a\xf6\x57\xdd\x6c\x5a\x3e\xc2\x91\x21\xdf\xac\xcc\xc9\xa8\xce\xe1\x7b\xc2\xaf\x49\x1c\xc7\x9e\xb7\x7b\x57\x4e\x8b\xf2\x6f\x81\xc9\xee\xed\xc8\x8d\x90\xaa\x6b\x75\x27\x79\x28\xbb\xdf\x1b\xa3\xf1\x96\x45\xd6\x27\x7c\xdf\xe8\xbc\x5b\xae\x25\x9b\xba\x2b\xde\x17\x44\x81\x92\x17\xee\x71\x46\xe7\xda\xb8\x66\x9f\x7b\x73\x5b\x3e\xce\xa7\x8d\x6b\xca\xe5\xfa\xc6\xd1\xbf\x1b\x98\x88\x1f\xab\x69\x2a\xb9\xfc\x01\x3e\x7b\x7e\xf2\x27\x00\x00\xff\xff\x05\x5c\x2a\xbc\xc9\x04\x00\x00")

func templatesMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainHtml,
		"templates/main.html",
	)
}

func templatesMainHtml() (*asset, error) {
	bytes, err := templatesMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.html", size: 1225, mode: os.FileMode(436), modTime: time.Unix(1543538693, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/main.html": templatesMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"main.html": &bintree{templatesMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
