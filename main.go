// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/main.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesMainHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xc1\x8e\x9b\x30\x10\x86\xef\x3c\xc5\x5f\x2e\xb4\xaa\x81\x42\xba\xad\x96\x05\x4e\xb9\x54\xea\xa1\x52\xa5\x5e\xa2\x1c\x1c\x6c\x09\xa7\xc6\x20\x7b\x4a\x8a\xaa\xbe\x7b\x85\xe3\x28\xa8\x39\xec\x0d\x8d\x98\xef\xfb\x3d\x33\x75\x2f\xb9\x68\x23\xa0\x7e\x93\xa6\xf8\xa6\x47\xd2\x4b\x76\x76\x48\xd3\xb5\x88\xda\x75\x56\x4d\x04\x67\xbb\x26\xee\x89\x26\x57\xe5\x79\x27\x4c\x36\xe9\x91\x32\xbd\xe4\x93\xef\x48\x35\x27\xe9\x28\x1b\x94\xc9\xce\x2e\x6e\xeb\xfc\xda\xd7\x46\x75\x7e\x15\x44\xf5\x69\x14\x8b\x17\x09\x35\x43\x89\x26\x1e\x96\xbd\x9a\xe3\x76\x23\x46\xd7\x73\x4b\xb8\x28\xad\x71\x92\x10\x96\x5f\x0c\x94\x71\x4a\x48\x50\xaf\x1c\xf6\x5f\x7e\xac\xc9\xea\x5c\xa8\xd9\xb3\x6e\x9a\x99\x5b\x90\xe5\x9d\x2c\xd0\xe0\x4f\x04\xfc\xae\x70\x28\x18\x4a\x86\x1d\xc3\xc7\x23\x8b\x80\x65\x2d\x7d\x60\x28\x9e\x18\x8a\x1d\x43\xf1\xd9\x97\x87\x51\xc8\x0a\xc9\xc0\xed\x4f\x69\x5d\x12\xfd\x7d\x89\xee\xb8\x72\x83\x0b\x2c\x86\xa7\x3b\xee\x13\xc3\x4a\x2b\x18\x9e\xb7\x30\xad\x8c\xfc\x1f\xb5\x7b\x25\x59\xc9\xf0\x1c\xc2\x95\x0f\xac\xf7\x0f\xf1\x04\x27\x8e\x06\x87\xf0\x6c\x16\xf2\xb2\x9b\xec\x18\xfe\xd3\x7c\x19\x7f\x51\x70\x93\x22\x2d\xab\xe4\xab\x32\x12\xdc\x08\x7c\xef\x38\x91\xb4\x7e\xfc\x57\x74\xb8\x00\x23\x2f\xeb\xd7\xdb\xc4\x2f\x29\x61\x5e\xc7\x02\xec\xdd\xcb\x3a\xfa\xcd\x8a\xfd\x6a\xc3\x25\xfd\x0b\x00\x00\xff\xff\x70\x94\x8c\x09\x51\x02\x00\x00")

func templatesMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainHtml,
		"templates/main.html",
	)
}

func templatesMainHtml() (*asset, error) {
	bytes, err := templatesMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.html", size: 593, mode: os.FileMode(436), modTime: time.Unix(1543371196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/main.html": templatesMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"main.html": &bintree{templatesMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
