// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/main.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesMainHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x4d\x6f\xa3\x30\x10\x86\xef\xfe\x15\xb3\x5c\x68\x24\x3e\x42\x09\xa6\x25\x24\xa7\x5c\xf6\xb6\xa7\xbd\x54\xd1\xca\xc5\x5e\xe1\xca\x01\x64\x4f\x48\xad\x2a\xff\x7d\x85\x03\x51\xa4\xed\xc1\x37\xcb\x7a\xfc\xce\x23\x79\xde\xba\x15\x8c\xef\x09\x40\xfd\x23\x8e\xe1\x97\xea\x51\xd9\xe4\xc3\x40\x1c\x4f\x97\x50\x9b\x46\xcb\x01\xc1\xe8\x66\x17\xb4\x88\x83\xa9\xd2\xb4\xe1\x5d\x32\xa8\x1e\x13\x65\xd3\xc1\xbd\x88\x15\x43\x61\x30\x39\xc9\x2e\xf9\x30\xc1\xbe\x4e\x6f\xef\xf6\xa4\x4e\x6f\x03\x48\xfd\xde\x73\xeb\x06\x71\x39\x82\xe4\xbb\xe0\x64\x0f\x72\x0c\xf6\x0f\x83\xa1\x69\x99\x46\xb8\x48\xa5\xe0\x5d\x00\xd7\xec\xd2\x81\xec\x8c\xe4\x02\xb0\x95\x06\x0e\x3f\x7f\x4f\x66\x75\xca\xe5\xe8\xb2\x96\x31\x9a\x5d\xfe\x70\x86\x0c\x76\xf0\xf6\x15\xa0\x3c\x09\x83\xec\x34\x04\x55\x56\x6c\xf2\x22\xcf\xd7\xf4\x39\x0a\x46\xa6\xce\x22\xa8\xe2\x6c\x9d\x95\x79\x76\x8d\xbe\x03\x73\xba\xf1\x03\x29\x2d\xfc\xc0\x57\x4a\xbd\xc0\xcd\x33\x2d\xfd\xc0\x82\xbe\xf8\x81\x2f\xf4\xd5\x0b\x2c\xb2\x72\xed\x07\x6e\xca\xcc\x0f\x2c\x3d\x41\xba\x2e\x73\x3f\x30\x2f\xff\xff\x99\x23\x01\x20\x23\xd3\x80\x9a\x35\x02\x76\xf0\x45\x00\x3e\x2b\x78\x3b\x46\x04\xc0\x2e\x07\xb4\x83\xa8\x20\x34\x0d\x43\x14\x9a\x5c\xb7\x84\xfc\xed\x35\x3c\x89\x0e\xb5\x05\xd9\xc1\xb2\x3e\x2b\x17\xe0\xc2\x92\xcf\x64\x38\x9b\xf6\xc6\x24\x77\x9d\xd5\xf6\x0e\xd8\x47\xc0\x89\xad\xb6\xe4\x4a\x9c\xcf\xb2\x8b\xb3\xd8\x71\x7b\xbb\x56\xcc\xf6\x67\x9c\x3d\x51\xa2\x12\x55\x78\x98\xd0\x69\xff\x43\x27\x36\x57\xb0\x13\x97\xe9\xf4\x14\xba\x96\x84\x91\x4b\x8c\xe6\x00\x27\xf1\xd8\x31\xd7\xad\xb9\xca\xff\x02\x00\x00\xff\xff\x88\x94\x9a\xc0\xd2\x03\x00\x00")

func templatesMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainHtml,
		"templates/main.html",
	)
}

func templatesMainHtml() (*asset, error) {
	bytes, err := templatesMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.html", size: 978, mode: os.FileMode(436), modTime: time.Unix(1543537269, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/main.html": templatesMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"main.html": &bintree{templatesMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
