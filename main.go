// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/main.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesMainHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x3d\x8f\x9b\x30\x18\xc7\x77\x7f\x8a\xa7\x2c\x24\x15\xaf\x47\x30\x77\x84\x64\xca\xd2\xad\x53\x97\x28\xaa\x7c\xe0\x0a\x9f\x1c\x40\xf6\x13\x38\x74\xca\x77\xaf\x30\x70\x8a\xda\x1b\xbc\x59\xd6\xef\xff\x82\xf0\xbf\xa8\x39\xab\x8e\x04\xa0\xf8\xe6\xfb\xf0\x53\xb6\x28\xc7\xe0\x4d\x83\xef\x4f\x97\x50\xe8\x52\x89\x0e\x41\xab\xf2\xe0\xd4\x88\x9d\xce\xc3\xb0\xac\x9a\xa0\x93\x2d\x06\x72\x0c\x3b\xa3\xf0\x25\x43\xae\x31\xb8\x8a\x26\x78\xd3\xce\xb1\x08\x67\xdd\x91\x14\xe1\x1c\x40\x8a\xd7\xb6\x1a\x4d\x50\x25\x7a\x10\xd5\xc1\xb9\x8e\x27\xd1\x3b\xc7\x87\x60\x28\x6b\xa6\x10\x06\x21\x25\xbc\x72\xa8\x14\x1b\x1a\x10\x8d\x16\x15\x07\xac\x85\x86\xd3\x8f\x5f\x53\xb3\x22\xac\x44\x6f\xbc\xd6\x18\xc5\x86\xdf\x15\x43\x06\x07\x38\x7f\x38\x28\xae\x5c\x23\xbb\x76\x4e\x1e\xa7\xbb\x24\x4d\x92\x88\x3e\x79\x4e\xcf\xe4\x8d\x3b\xb9\x1f\x47\x71\x96\xc4\x77\xef\x2b\x30\xa1\x3b\x3b\x90\xd2\xd4\x0e\x7c\xa1\xd4\x0a\xdc\x3d\xd1\xcc\x0e\x4c\xe9\xb3\x1d\xf8\x4c\x5f\xac\xc0\x34\xce\x22\x3b\x70\x67\x0b\x66\x59\x6c\x05\xd2\x28\x4b\xec\xc0\x24\xfb\xff\xcf\x5c\x08\xe9\x99\x02\x54\xac\xe4\x70\x80\x0f\x02\xf0\x9e\xc3\xf9\xe2\x11\x80\x71\x3d\xe0\xd8\xf1\x1c\x5c\x5d\x32\x44\xae\x5c\x8f\xdc\xf7\x84\xfc\x69\x15\x6c\x78\x83\x6a\x04\xd1\xc0\xfa\x7c\xb6\xc6\xc2\xd8\x05\xef\x41\x77\xd3\xf5\xa6\xe1\x03\x9c\x18\xf2\xcd\xca\x9c\x8d\xea\x12\x7c\x36\xfc\x1e\x47\x51\xb4\xdd\xee\x3f\x95\xe3\xac\xfc\x57\x60\xba\x6f\xf7\xe4\x3e\x97\x5e\x9f\xeb\xd2\xfe\xb2\x9f\xaf\x25\x1b\xdb\x1b\x2e\x1f\x83\x02\x25\xcf\xdd\xd3\x84\x4e\x13\x71\x4d\xf7\x65\xa5\x0d\x1f\xa6\xd3\xc6\x35\x43\x72\x3d\xe3\xe8\x2d\x06\xa6\xce\xe3\x0c\xcd\xfc\x96\xb5\xff\x0d\x00\x00\xff\xff\x66\x38\x80\x30\xf5\x03\x00\x00")

func templatesMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainHtml,
		"templates/main.html",
	)
}

func templatesMainHtml() (*asset, error) {
	bytes, err := templatesMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.html", size: 1013, mode: os.FileMode(436), modTime: time.Unix(1543623204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/main.html": templatesMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"main.html": &bintree{templatesMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
