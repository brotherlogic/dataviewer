// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/main.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesMainHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x53\xef\x6f\x9b\x30\x10\xfd\xee\xbf\xe2\x86\xa6\x06\xa6\xc4\xd0\x6a\xad\x32\x02\xf9\x94\x69\x3f\xb4\x75\xd3\x5a\x4d\x93\xaa\x6a\x72\xe1\xda\xb8\x32\x86\xd9\x47\x12\x14\xf1\xbf\x4f\x36\xd0\x45\xcb\x27\x6c\xbf\xf7\xee\xde\xcb\x1d\xcb\xb6\x28\xca\x35\x03\xc8\x5e\x2d\x16\xf0\x5d\xd5\xa4\x3a\xfe\x6c\x61\xb1\x70\x97\x90\xd9\xc2\xc8\x86\xc0\x9a\x22\x0f\xb6\x44\x8d\x4d\xe3\xb8\x28\x35\x6f\x54\x4d\x5c\x75\x71\xe3\x19\x0b\x25\x08\x2d\xf1\x4a\x6a\xfe\x6c\x83\x75\x16\x0f\xbc\x35\xcb\xe2\xa1\x00\xcb\x1e\xea\xb2\xf3\x85\x2c\x2a\x2c\xc8\xcb\xc3\xf1\x68\x84\x7e\x42\x78\xbd\x13\xaa\x45\x48\x73\xe0\xd7\xa2\x42\xdb\xf7\xfe\x39\xab\x1b\x92\xb5\x06\xff\x9a\x07\xc7\xe3\x04\xec\xfb\x60\x7d\x7a\xca\xe2\x01\x39\xa9\xa2\x2e\xbd\x44\x16\xff\xab\xe6\x8e\xa5\xdc\x81\x2c\xf3\xa0\xea\x36\x72\x17\xac\x4f\x4c\x43\xb1\x15\x86\x60\x2f\x95\x82\x07\x84\xd2\x88\xbd\x06\xa9\xad\x2c\x11\x68\x2b\x2d\x6c\x3e\xfd\x74\xa9\x64\x71\x29\x77\x83\x8f\xd1\x22\xdb\x09\x03\x87\x4a\xb9\x78\x20\x07\x8d\x7b\xf8\xf5\xf5\xcb\x47\xa2\xe6\x07\xfe\x69\xd1\x52\x18\xad\x3c\xa6\x35\x0a\x72\xf0\x31\xa6\x71\x7c\xfe\xee\x82\x9f\x5f\x2d\xf9\xf2\x8a\x5f\x5c\x26\xe9\x32\x59\x5e\x06\x2b\xc6\x46\x21\x5e\x6b\x83\xa2\xec\x2c\x09\xc2\x62\xeb\x43\xca\xe1\xb1\xd5\x85\xb3\x19\x46\x70\xf4\x4e\xe5\x23\x84\xae\x3b\xee\xc1\x37\x0e\x0c\x79\x0e\x6f\xe1\xec\xcc\x77\xcd\x1d\xbf\xb5\xee\xee\x22\x49\x26\x96\xfb\xb9\x86\x8c\xd8\xff\x2e\x05\x09\xc8\xe1\xf3\xcd\xb7\x6b\xde\x08\x63\x71\xd2\xb3\x4d\xad\x2d\xde\xe2\x81\xa2\xd5\xe0\x91\x8c\x28\x5c\x17\x4e\xe4\x90\xc2\xdd\xfd\x9c\x01\x74\xd3\x07\x75\x0d\xa6\x30\xb3\x85\x20\x42\x33\x9b\xb3\x7e\xc5\xd8\x63\x6d\x20\x44\x4d\xa6\x03\xa9\x5f\xea\x0d\x7d\x78\x39\x7e\xe0\x4d\x6b\xb7\xa1\x4b\x6d\x23\x08\xc3\x09\x73\xe7\x59\xf7\x9c\x64\x85\x96\x44\xd5\xbc\x39\x4f\x92\x24\x8a\x56\x2f\xcc\x6e\x60\xfe\x4f\xf0\x23\x11\xad\x58\xcf\x58\x51\x6b\x5b\x2b\xe4\xaa\x7e\x0a\x3d\x27\x1a\x8c\x8c\x9e\xef\x46\x47\xf7\xa3\x3f\x25\xba\xba\xa5\xd1\x20\x49\x52\x98\xce\x36\x0e\xea\x26\x64\xe6\xfd\x8c\x0b\xa2\x71\xef\xbe\xc2\x99\x9f\xa3\xd9\xdc\x2b\xce\x47\x01\x17\x97\x4b\xb8\xf7\x8c\x97\xff\xb3\x41\x1d\x06\x1f\xde\xdf\x06\x73\x37\x08\x73\x20\xe3\xdb\x9c\xde\x2d\xea\x32\xf4\xee\x4e\x97\xc7\x2f\xcd\xb8\xa3\x7f\x03\x00\x00\xff\xff\x8b\xff\xa7\x84\xac\x03\x00\x00")

func templatesMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainHtml,
		"templates/main.html",
	)
}

func templatesMainHtml() (*asset, error) {
	bytes, err := templatesMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.html", size: 940, mode: os.FileMode(436), modTime: time.Unix(1545010470, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/main.html": templatesMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"main.html": &bintree{templatesMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
