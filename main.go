// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/main.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesMainHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x61\x6f\xc3\x34\x10\xfd\xee\x5f\x71\x44\x68\x4d\x51\xeb\x74\x13\x4c\xa5\x4d\xf2\x01\x75\x82\x21\x18\x88\x0d\x84\x54\x55\xc8\x8b\xaf\xab\x27\xc7\x09\xf6\xa5\x6d\x54\xf5\xbf\x23\x3b\x49\x55\x81\xf8\xbc\xf9\x53\xea\xde\x7b\x79\xef\xfc\x9c\x4b\x77\x54\xea\x9c\xa5\x3b\x14\x32\x67\x00\xe9\x17\xd3\x29\xfc\xaa\x2b\xd2\x2d\x7f\x77\x30\x9d\xfa\x4d\x48\x5d\x61\x55\x4d\xe0\x6c\x91\x45\x3b\xa2\xda\x2d\x92\xa4\x90\x86\xd7\xba\x22\xae\xdb\xa4\x0e\x88\xa9\x16\x84\x8e\x78\xa9\x0c\x7f\x77\x51\x9e\x26\x1d\x2e\x67\x69\xd2\xbd\x80\x5d\xb8\x72\xb6\x6d\x4c\x41\xaa\x32\x50\x0b\x65\x28\x1e\xc3\x89\xb1\xbd\xb0\x80\x90\x81\xac\x8a\xa6\x44\x43\xfc\x0d\xe9\x41\xa3\x7f\xfc\xae\x7d\x94\x71\xb4\x55\x9a\xd0\x46\xe3\x65\x28\x75\x64\x7f\x77\x68\x21\x03\xe4\x55\xed\xc9\xdc\x1a\xb9\x43\x8d\x05\xa1\x7c\x34\x12\x8f\x1b\xbe\x17\xba\xc1\x65\xc7\x7d\x2c\xb5\x97\x0f\x19\x18\x3c\xc0\x9f\x3f\xff\xf4\x03\x51\xfd\x1b\xfe\xdd\xa0\xa3\xb8\x27\x6d\xac\x86\x0c\x82\xcd\x45\x92\xdc\x7e\x7b\xc7\x6f\xef\xe7\x7c\x7e\xcf\xef\xe6\x8b\xf9\x6c\xfe\x4d\x22\xb4\x4e\xa2\x25\x63\x3d\x19\xaf\x8c\x45\x21\x5b\x47\x82\xb0\xd8\x09\xf3\xe6\x1d\x0c\xee\x82\x2f\x00\x00\xb5\x85\x98\x76\xca\xf1\x50\xfc\xec\x8b\x21\xcb\xe0\x6b\xb8\xb9\x81\xb0\xef\xf1\x8d\xf3\x7b\x77\xb3\xd9\x80\xf2\xcb\x8b\xb2\xe2\xf0\x97\x14\x24\x20\x83\x1f\x9f\x7f\x79\xe2\xb5\xb0\x0e\x07\x3e\x57\x57\xc6\xe1\x0b\x1e\x69\xdc\xfb\x24\x2b\x0a\xaf\xc2\x93\x1c\x17\xb0\xde\x4c\x18\x40\x3b\x3c\x50\x5b\xe3\x02\x46\xae\x10\x44\x68\x47\x13\x76\x5e\x32\xb6\xad\x2c\xc4\x68\xc8\xb6\xa0\xcc\xe5\x7d\x9d\x8e\x40\xc7\x8f\xbc\x6e\xdc\x2e\xf6\x9d\x5b\x09\xc2\x78\xa8\x59\x07\xd4\x86\x93\x2a\xd1\x91\x28\xeb\xaf\x6e\x67\xb3\xd9\x78\xbc\xbc\x20\xdb\x0e\xf9\x6f\x40\x38\x99\xf1\x92\x9d\x19\x2b\x2a\xe3\x2a\x8d\x5c\x57\x6f\x71\xc0\x8c\x3b\x23\xbd\xe7\x75\xef\x68\xd3\xfb\xd3\xa2\xad\x1a\xea\x0d\x92\x22\x8d\x8b\xd1\xca\x97\xfa\xe8\x8e\x82\x9f\x3e\xc4\x06\x0f\xfe\x29\x1e\x95\xed\x4a\xed\x47\x93\xc0\x38\xe9\x09\x7c\xbb\x7c\x87\xcf\x01\x71\x39\xcf\x1a\x4d\x1c\x7d\xff\xf0\x12\x4d\x7c\x18\x26\x40\x36\xc8\x1c\xfe\x77\x68\x64\x1c\x64\x03\x5c\x45\xfc\xb5\x92\x6d\xce\xd2\x6d\x65\xcb\x70\x93\xba\x18\x82\x92\xd9\x90\x5a\xa8\x4c\x97\x8f\x2c\x0a\x99\x8f\xf2\x1c\x3e\xd9\x3a\x9d\x6c\x08\xf0\x97\xe1\x6c\x60\x91\x01\x7f\x12\x25\xba\xf3\xf9\xa3\x95\xfd\xef\x4a\xbb\x9b\x0f\x41\x71\x16\x9d\x4e\x83\xf8\xf3\x39\xca\xaf\x7f\xa5\x49\x57\xf9\xf1\x4d\x3f\x9d\xd0\xc8\x4f\xdc\xd2\xff\xac\x34\xe9\xd2\xec\xbf\xe4\x5d\xc0\x7d\xc2\xa5\xda\x87\x78\x87\xab\x15\xe5\x57\xb3\x03\x8a\x9d\xb0\x04\x07\xa5\x35\xbc\x22\x48\x2b\x0e\x06\x94\x71\x4a\x62\xf8\xd8\xc1\xea\xf1\x0f\x3f\x5c\xd2\x44\xaa\x7d\xce\xd8\x65\x28\xf4\xb3\x80\x5d\x8f\x8e\xfe\x62\x25\xdd\xa8\xfa\x27\x00\x00\xff\xff\x8a\xf1\xde\x43\xb2\x06\x00\x00")

func templatesMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainHtml,
		"templates/main.html",
	)
}

func templatesMainHtml() (*asset, error) {
	bytes, err := templatesMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.html", size: 1714, mode: os.FileMode(436), modTime: time.Unix(1545182638, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/main.html": templatesMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"main.html": &bintree{templatesMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
